// Traversing_Linked_List

  class Node{
      int data;
      Node next;
      Node(int x){
          data = x;
          next = null;
      }
  }
  public class TraversingLinkedList {
      public static void main(String[] args) {
          Node head = new Node(12);
          head.next = new Node(23);
          head.next.next = new Node((16));
          head.next.next.next = new Node((24));
          printList(head);
      }
      public static void printList(Node head){
          Node temp = head;
          while(temp != null){
              System.out.println(temp.data);  // 12 23 16 24
              temp = temp.next;
          }
      }
  }
--------------------------------------------------------------------------------

// Insert_At_Begin
    
   head = insertAtBegin(head,4);  // Write this in Main Function.
  
   public static Node insertAtBegin(Node head , int x){
        Node newNode = new Node(x);
        newNode.next = head;
        return newNode;
   }

----------------------------------------------------------------------------------

// Insert_At_End
  
  head = insertAtEnd(head,47);  // Write this in Main Function.

  public static Node insertAtEnd(Node head , int x){
          Node temp = new Node(x);
          if(head == null){
              return temp;
          }
          Node curr = head;
          while(curr.next != null){
              curr = curr.next;
          }
          curr.next = temp;
          return head;
    }
    
---------------------------------------------------------------------------------------

// Delete First Node Of Singly Linked List
  
  public static delFirstNode(Node head){
      if(head == null)
        return null;
      else
        return head.next;
  }

--------------------------------------------------------------------------------------

// Delete Last Node of Singly Linked List

  public static Node delLastNode(Node head)(
      if(head == null) return null;
      if(head.next == null) return null;
      Node curr = head;
      while(curr.next.next != null){
        curr = curr.next;
      }
      curr.next = null;
      return head;
  }  
  
-------------------------------------------------------------------------------------

// Insert at given Position in Singly Linked List.

 insertAtGivenPos(head,4,13);  // Write this in Main Function.

 public static Node insertAtGivenPos(Node head, int pos , int data){
       Node temp = new Node(data);
       if(pos == 1){
           temp.next = head;
           return head;
       }
       Node curr = head;
       for(int i=1 ; i<pos-1 && curr != null ; i++){
           curr = curr.next;
       }
       if(curr == null) return head;
       temp.next = curr.next;
       curr.next = temp;
       return head;
 }
 
 --------------------------------------------------------------------------------------
 
 // Search in Linked List 
 
   int search(Node head , int x){
      int pos = 1;
      Node curr = head;
      while(curr != null){
          if(curr.data == x){
              return pos;
          }else{
              pos++;
              curr = curr.next;
          }
      }
      return -1;
   }

 ---------------------------------------------------------------------------------------
// Question On Linked List  

1. Reverse Linked List                                                                  Efficient Solution
  
 public ListNode reverseList(ListNode head) {                                           ListNode reverse(Node head){
        ArrayList<Integer> list = new ArrayList<>();                                        ListNode curr = head;
        for(ListNode curr = head ; curr != null ; curr = curr.next){                        ListNode prev = null;
            list.add(curr.val);                                                             while(curr != null){
        }                                                                                       ListNode next = curr.next;
        int index = list.size()-1;                                                              curr.next = prev;  
        for(ListNode temp = head ; temp != null ; temp = temp.next){                            prev = curr;
            temp.val = list.get(index);                                                         curr = next;
            index--;                                                                        }
        }                                                                                   return prev;
        return head;                                                                    }   
    }
    
-------------------------------------------------------------------------------------------------------------------------------------------------
 
 
